class CreateQuestionService
    def call
        correct_options = CreateOptionService.new.send(:correct_options)
        questions_list.each_slice(3).with_index do |(easy, medium, hard), i|
            index = i * 3
            easy_answer, medium_answer, hard_answer = Option.find_by_name correct_options[index], Option.find_by_name correct_options[index+1], Option.find_by_name correct_options[index+2]
            EasyQuestion.find_or_create_by!(chapter: , correct_option: easy_answer, name: easy)
            MediumQuestion.find_or_create_by!(chapter: , correct_option: medium_answer, name: medium)
            HardQuestion.find_or_create_by!(chapter: , correct_option: hard_answer, name: hard)
        end
    end

    private
    def questions_list
        ["What are the only two values that are falsy?",
            "True or False: Ruby uses short-circuit evaluation for boolean operators.",
            "Is Ruby whitespace-dependent?",
            "What is the highest level in the object model in Ruby 1.9+?",
            "Is everything in Ruby an object?",
            "Which core object includes the Kernel module?",
            "What can you say for sure about an identifier that begins with a capital letter?",
            "What does DSL stand for and why does it come up when describing Ruby?",
            "What is duck typing and how does it apply to Ruby?",
            "Is Ruby a statically typed or a dynamically typed language?",
            "Is Ruby a strongly typed or a weakly typed language?",
            "What does it mean to coerce an object? Why would you do it?",
            "What is the difference between a statement and an expression in Ruby?",
            "What module would need to use for cryptographically secure random numbers?",
            "Where does scope change in a Ruby program?",
            "Are strings mutable?",
            "What is the output of the expression 'hello'[-1] ?",
            "What does String#chomp do?",
            "What does String#chop do?",
            "Why might you want to avoid using string literals within loops?",
            "Is a String object enumerable in Ruby 1.9+?",
            "What method might you use to enumerate over a String in Ruby 1.9+?",
            "What is the difference between a character literal such as ?A and a string literal such as 'A'?",
            "What is a symbol?",
            "Why are symbols typically used as hash keys instead of strings?",
            "What can't you do to instantiations of Symbol and Fixnum that you can do to all other instances of core Ruby objects?",
            "What does the single colon syntax do?",
            "True or False: It's possible to initialize a symbol with Symbol.new?",
            "Are Numeric objects mutable?",
            "Symbols are immutable objects. Name another immutable core Ruby object.",
            "What happens when a value is too big for Fixnum?",
            "The superclass of Fixnum is ___.",
            "The superclass of Integer is ___.",
            "What numeric class might you use to avoid the rounding error inherent in the use of binary floating-point arithmetic?",
            "What method might you use to remove duplicate values from an array?",
            "What is the %w syntax used for?",
            "What does %W allow for?",
            "True or False: a, b = ['foo', 'bar'] #=> a = 'foo', b = 'bar'",
            "True or False: This will throw an exception a, b = 1, 2, 3, 4",
            "Name one synonym for #key??",
            "How do you specify a default value for a hash?",
            "Does Hash use #== or #eql? to compare hash keys?",
            "In what order are the values of a hash iteration in Ruby 1.9+?",
            "What is the synonym of Hash#store?",
            "Why can you safely use a String as a hash key, even though a string is a mutable object?",
            "Why might you want to use Hash#fetch over Hash#[] when querying values in a hash?",
            "When would you need to use Hash#rehash?",
            "What are two uses of ranges?",
            "What is the regular expression modifier to ignore case?",
            "What is the pattern matching operator?",
            "How might you include an expression within a Regexp literal?",
            "What is the global variable for the last Regexp match?",
            "What does the %r syntax allow and why is it useful?",
            "What are two uses of the splat operator?",
            "What is the only operator that operates on three operands?",
            "Which operator must be defined in order to implement the Comparable module?",
            "What is the difference between #== and #equal??",
            "What is the difference between #== and #===?",
            "What is the difference between #== and #eql??",
            "Which binds more tightly? && or and",
            "Which binds more tightly? && or =",
            "Which binds more tightly? and or =",
            "Which binds more tightly? && or ||",
            "What is the arity of an operator?",
            "What is a statement modifier?",
            "Does a while block define it's own variable scope?",
            "Does a case statement have fall-through behavior?",
            "What is the difference between throw/catch and raise/rescue?",
            "Does a rescue block define it's own variable scope?",
            "What are some advantages of a case statement versus repeated elsif statements?",
            "What are some disadvantages of a case statement versus repeated elsif statements?",
            "Name three methods of the Enumerable module.",
            "Name two Enumerable classes (classes which mix in the Enumerable module).",
            "When might you use the do/end syntax versus using the curly bracket syntax for a block?",
            "What is an iterator?",
            "How do you define block-local variables in a block's parameter list?",
            "What is the synonym of #include??",
            "Can a collection be modified while it is being iterated upon?",
            "Is a block an object?",
            "What is the synonym of #collect?",
            "What is the synonym of #find?",
            "What is the synonym of #select?",
            "What is the opposite of #select?",
            "What is the synonym of #inject?",
            "Why might you use #each instead of for/in?",
            "What happens if a bock in Ruby 1.9+ is passed two arguments but only accepts one argument?",
            "How is a block anonymous?",
            "How does block invocation differ from method invocation?",
            "Can methods be overloaded?",
            "How would you test whether an object has a method?",
            "What is self?",
            "What does a bang ! at the end of a method signify?",
            "What is a mutator method?",
            "Is a method an object?",
            "What is a predicate in the context of Ruby method naming conventions?",
            "Are instance methods public or private?",
            "When might you explicitly use the return statement.",
            "Why might you want to alias a method?",
            "How might you send a message to a private method of a receiver object from outside the scope of the receiver object?",
            "How might you prevent future modifications to an object?",
            "How is the invocation of a private method different than the invocation of a public method from within its defining class?",
            "Can method names be capitalized?",
            "What is the difference between private and protected methods?",
            "What is a singleton method?",
            "What is method name resolution?",
            "How does return differ from within a method than from within a block?",
            "Are class methods public or private?",
            "Does a method return a value if it does not contain an expression?",
            "Name one instance when parenthesis are required in method invocation?",
            "If a method is declared outside a class or module definition at the top-level, where does it live?",
            "What is the origin of the 'keywords' public, private, and protected?",
            "Describe the method name resolution process.",
            "How do you define a private class method?",
            "Name two ways to disable methods.",
            "What is the difference between #remove_method and #undef_method?",
            "Explain how Ruby syntax supports object specifiers in parameters lists?",
            "What are the two varieties of Proc objects?",
            "How do you accept an associated block within a Proc's paramters list.",
            "What is true about a method argument that is prefixed with &?",
            "What is the main difference between procs and lambdas?",
            "Does an object have to be a Proc object for a & to be prefixed to it in a parameter list?",
            "What is the difference between a Proc invocation and a lambda invocaton?",
            "When might you encounter a LocalJumpError?",
            "What is a closure?",
            "Does a closure in Ruby retain variables by value or by reference?",
            "A closure's reference to its variables is said to by dynamically bound. What does this mean?",
            "Is it possible to alter a closure?",
            "What must you do first before you can invoke an UnboundMethod object?",
            "Are method objects closures?",
            "How do you obtain a Method object from an existing module/class?",
            "How do you obtain an UnboundMethod object from an existing module/class?",
            "Are constants public or private?",
            "What happens if you attempt to define a constant on a class from outside the class?",
            "What happens to a constant that is not assigned?",
            "If there exists A::CONSTANT, and B is a subclass of A, what does a reference to CONSTANT (without a scope resolution operator) resolve to within the lexical scope of B?",
            "What is wrong with the following code?  \n  class MyClass;def my_method;MY_CONSTANT = 'hello';end;end",
            "What does #attr_accessor do?",
            "What is the difference between an instance variable and a class variable?",
            "Why must a class name begin with a capital letter?",
            "Is #initialize an instance method or a class method?",
            "Why can't a class instance variable be used within an instance method?",
            "What is the difference between a class variable and a class instance variable?",
            "What is a singleton?",
            "What is the difference between a singleton and a singleton method?",
            "How do you create a singleton?",
            "Can you defined accessor methods for class instance variables?",
            "Can classes be nested?",
            "Is #initialize public or private?",
            "What does #allocate do?",
            "What is an eigenclass?",
            "What is the relationship between singleton methods and class methods?",
            "What is Class::new?",
            "If Class B is nested within Class A, and there exists a class method on A, does Class B have access to this instance method on Class A?",
            "Are eigenclasses inherited?",
            "What happens to any return value of #initialize?",
            "What is a factory method?",
            "What is the method to run initialization code on copied instances of an object?",
            "What object is passed to #initialize_copy?",
            "Does #initialize_copy override #initialize?",
            "What does it mean that #dup and #clone perform shallow copies?",
            "What is the difference between #dup and #clone?",
            "Why might you not need to pass any arguments to the #initialize method of a singleton class?",
            "What are the two functions of modules?",
            "Can a module be subclassed?",
            "What happens when a class includes a module?",
            "What happens when an object extends a module?",
            "What is the superclass of Class?",
            "Why must module names begin with a capital letter?",
            "How might you check if a module has been included by an object?",
            "Concerning those methods that are namespaced by a module, why might you explicitly invoke those methods on self rather than on the name of the module?",
            "Inferring from the behavior of Module#include, is this method a public or private instance method of Module? A: Private, because it can't be used outside of a Module or Class definition.",
            "What does #module_function do?",
            "What is a Struct in Ruby?",
            "Can you add methods to a Struct?",
            "What's the difference between #is_a? and #instance_of??",
            "If #super is invoked without any arguments, which if any arguments get passed to the superclass method?",
            "Are instance methods inherited?",
            "Are class methods inherited?",
            "Are constants inherited?",
            "Are class variables inherited?",
            "Why might you not want to use class variables?",
            "What should you look out for when subclassing a class that is unknown to you?",
            "How might you prevent a method on a superclass from being inherited by a subclass?",
            "Name one method in Ruby core that might be considered 'metaprogramming.'",
            "Is #attr_reader an example of metaprogramming?",
            "How might you access an instance variable of a receiver object from outside the scope of the receiver object?",
            "Which method is invoked when a method is not found?",
            "How do you open an eigenclass from within its associated class?",
            "Why should you avoid calling #eval on text received from a user?",
            "What is a binding?",
            "What is Ruby's reflection API?",
            "Which method is called when a constant is not found?",
            "#define_method accepts how many and of what types of arguments?",
            "Does #eval accept a block?",
            "How might you obtain a reference to an eigenclass from within its associated class?",
            "How might you change method visibility from outside a class definition?",
            "Why is #eval useful for testing code?",
            "What is the difference between #instance_eval and #instance_exec?",
            "Where do #class_variable_get and #class_variables_set live in the object model?",
            "Where do #instance_variable_get and #instance_variables_set live in the object model?",
            "Where do #local_variables and #global live in the object model?",
            "Which is more common, #require or #load?",
            "What is $LOAD_PATH?",
            "What is the difference between #require and #load?",
            "Does a file loaded with #require or #load have access to the local variables of the loading file?",
            "What is the difference between #require and #require_relative?",
            "What does #autoload do?",
            "What does File#expand_path do?",
            "What method in Dir is used to list the contents of a directory?",
            "What is an IO object?",
            "In Ruby 1.9+, are RubyGems installation directories included in $LOAD_PATH?",
            "In Ruby 1.9+, if more than one version of a Gem is installed, which version will be used?",
            "In Ruby 1.9+, how would you alter the default version of a Gem that will be used? A: Using Kernel#gem.",
            "What can you say about objects derived from tainted objects?",
            "What is the default $SAFE level?",
            "What happens when you attempt to lower the $SAFE level?",
            "What is the difference between taint and trust?",
            "What error is raised if a method is passed the wrong number of arguments?",
            "What error is raised if no #method_missing methods resolve to a method?",
            "The superclass of StandardError is ___.",
            "What does the default implementation of Kernel#module_missing do?",
            "What happens if you attempt to redefine BasicObject#__send__?",
            "What is the difference between #to_s and #inspect?",
            "What is the difference between #puts and #p?",
            "Which Ruby interpreter option enables debugging?",
            "What is the global variable for the last exception raised?",
            "How might you obtain the current state of the call stack?",
            "What does Kernel#__method__ return?",
            "In Ruby 1.9+, what is the synonym of Kernel#__method__?",
            "What does MRI most commonly stand for?",
            "What does IRB stand for?",
            "What is the difference between #puts and #prints?",
            "Where do the curly brackets to define a hash literal {} exist in Ruby's object model?",
            "What is the default encoding in MRI?",
            "What is the global constant used to access environment variable settings in effect for the interpreter?",
            "How does Ruby know that a setter method such as X#[]= will be called in the expression x = X.new; x.field = []?",
            "What is the global constant to access arguments specified on the command line?",
            "Which Ruby interpreter option enables warning about deprecated or problematic code?",
            "In MRI, which objects are not subject to garbage collection?",
            "What module in the standard library enables English language alternatives to terse global variables?"
        ]
    end
end